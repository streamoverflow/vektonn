{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Vektonn is a high-performance service for finding k-nearest neighbors (kNN) in vector space. Features \u00b6 Support for both dense and sparse vectors Precise and approximate kNN (AkNN) algorithms Scalable architecture that allows to easily handle hundreds-of-GB-worth of vector data Components \u00b6 There are three main parts of Vektonn: an API, an Index, and a Data Source. The API has methods for search and uploading vector data. It proxies requests to corresponding Indices and Data Sources. A Data Source is where all the vectors' data being persistently stored. Currently, a Data Source is implemented using Apache Kafka . An Index is an in-memory snapshot of data in Data Source. It updates asynchronously from a corresponding Data Source. A data from a single Data Source can be spread (sharded) over several Indices to fit in RAM of hosting nodes. A single Data Source may have several Indices defined on it with different metrics. Repositories \u00b6 vektonn is a main repository with implementations for the API, Index shards and Data Sources. It also contains sources for Vektonn's .NET client . vektonn-index is a .NET library for finding nearest neighbors in vector space. It provides an implementation of basic functionality for Indices: vector storage and retrieval. vektonn-client-python hosts Python client for Vektonn source code. vectonn-examples is a repository with various examples of Vektonn usage. Support \u00b6 If you have any questions or need help with Vektonn please contact us on Slack channel . License \u00b6 Vektonn is licensed under Apache License 2.0 , so you may freely use it for commercial purposes.","title":"Overview"},{"location":"#overview","text":"Vektonn is a high-performance service for finding k-nearest neighbors (kNN) in vector space.","title":"Overview"},{"location":"#features","text":"Support for both dense and sparse vectors Precise and approximate kNN (AkNN) algorithms Scalable architecture that allows to easily handle hundreds-of-GB-worth of vector data","title":"Features"},{"location":"#components","text":"There are three main parts of Vektonn: an API, an Index, and a Data Source. The API has methods for search and uploading vector data. It proxies requests to corresponding Indices and Data Sources. A Data Source is where all the vectors' data being persistently stored. Currently, a Data Source is implemented using Apache Kafka . An Index is an in-memory snapshot of data in Data Source. It updates asynchronously from a corresponding Data Source. A data from a single Data Source can be spread (sharded) over several Indices to fit in RAM of hosting nodes. A single Data Source may have several Indices defined on it with different metrics.","title":"Components"},{"location":"#repositories","text":"vektonn is a main repository with implementations for the API, Index shards and Data Sources. It also contains sources for Vektonn's .NET client . vektonn-index is a .NET library for finding nearest neighbors in vector space. It provides an implementation of basic functionality for Indices: vector storage and retrieval. vektonn-client-python hosts Python client for Vektonn source code. vectonn-examples is a repository with various examples of Vektonn usage.","title":"Repositories"},{"location":"#support","text":"If you have any questions or need help with Vektonn please contact us on Slack channel .","title":"Support"},{"location":"#license","text":"Vektonn is licensed under Apache License 2.0 , so you may freely use it for commercial purposes.","title":"License"},{"location":"quick-start/","text":"Quick Start \u00b6 Run Vektonn \u00b6 In order to run Vektonn locally you will need to install Docker . Run Vektonn configured for QuickStart examples: 1 2 3 git clone https://github.com/vektonn/vektonn-examples.git /path/to/vektonn-examples /path/to/vektonn-examples/docker/run-vektonn.sh QuickStart.Index Look at docker-compose.yaml to understand how to setup local Vektonn with single Index shard. Docker images for Vektonn are published on Docker Hub . Use Vektonn API with a Python client \u00b6 You will need Python >= 3.7 to run this sample. Install Vektonn SDK for Python: 1 pip install vektonn Initialize Vektonn client: 1 2 3 from vektonn import Vektonn vektonn_client = Vektonn ( 'http://localhost:8081' ) Upload data to Vektonn: 1 2 3 4 5 6 7 8 9 10 11 12 13 from vektonn.dtos import AttributeDto , AttributeValueDto , InputDataPointDto , VectorDto vektonn_client . upload ( data_source_name = 'QuickStart.Source' , data_source_version = '1.0' , input_data_points = [ InputDataPointDto ( attributes = [ AttributeDto ( key = 'id' , value = AttributeValueDto ( int64 = 1 )), AttributeDto ( key = 'payload' , value = AttributeValueDto ( string = 'sample data point' )), ], vector = VectorDto ( is_sparse = False , coordinates = [ 3.14 , 2.71 ])) ]) Search for k nearest data points to the given query_vector : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from vektonn.dtos import VectorDto , SearchQueryDto k = 10 query_vector = VectorDto ( is_sparse = False , coordinates = [ 1.2 , 3.4 ]) search_results = vektonn_client . search ( index_name = 'QuickStart.Index' , index_version = '1.0' , search_query = SearchQueryDto ( k = k , query_vectors = [ query_vector ])) print ( f 'For query vector { query_vector . coordinates } { k } nearest data points are:' ) for fdp in search_results [ 0 ] . nearest_data_points : attrs = { x . key : x . value for x in fdp . attributes } distance , vector , dp_id , payload = fdp . distance , fdp . vector , attrs [ 'id' ] . int64 , attrs [ 'payload' ] . string print ( f ' - \" { payload } \" with id = { dp_id } , vector = { vector . coordinates } , distance = { distance } ' ) What's next \u00b6 Take a look at Jupyter notebooks with several examples of solving problems similar to real ones using vector spaces and Vektonn: Hotels . Task: save the user's time while searching for hotels. This example uses vectorized user reviews to find hotels. Price Match Guarantee . Task: help the seller establish a competitive price for their product on the marketplace. Books . Task: find similar books by user reviews. This example demonstrates usage of sparse vectors.","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"quick-start/#run-vektonn","text":"In order to run Vektonn locally you will need to install Docker . Run Vektonn configured for QuickStart examples: 1 2 3 git clone https://github.com/vektonn/vektonn-examples.git /path/to/vektonn-examples /path/to/vektonn-examples/docker/run-vektonn.sh QuickStart.Index Look at docker-compose.yaml to understand how to setup local Vektonn with single Index shard. Docker images for Vektonn are published on Docker Hub .","title":"Run Vektonn"},{"location":"quick-start/#use-vektonn-api-with-a-python-client","text":"You will need Python >= 3.7 to run this sample. Install Vektonn SDK for Python: 1 pip install vektonn Initialize Vektonn client: 1 2 3 from vektonn import Vektonn vektonn_client = Vektonn ( 'http://localhost:8081' ) Upload data to Vektonn: 1 2 3 4 5 6 7 8 9 10 11 12 13 from vektonn.dtos import AttributeDto , AttributeValueDto , InputDataPointDto , VectorDto vektonn_client . upload ( data_source_name = 'QuickStart.Source' , data_source_version = '1.0' , input_data_points = [ InputDataPointDto ( attributes = [ AttributeDto ( key = 'id' , value = AttributeValueDto ( int64 = 1 )), AttributeDto ( key = 'payload' , value = AttributeValueDto ( string = 'sample data point' )), ], vector = VectorDto ( is_sparse = False , coordinates = [ 3.14 , 2.71 ])) ]) Search for k nearest data points to the given query_vector : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from vektonn.dtos import VectorDto , SearchQueryDto k = 10 query_vector = VectorDto ( is_sparse = False , coordinates = [ 1.2 , 3.4 ]) search_results = vektonn_client . search ( index_name = 'QuickStart.Index' , index_version = '1.0' , search_query = SearchQueryDto ( k = k , query_vectors = [ query_vector ])) print ( f 'For query vector { query_vector . coordinates } { k } nearest data points are:' ) for fdp in search_results [ 0 ] . nearest_data_points : attrs = { x . key : x . value for x in fdp . attributes } distance , vector , dp_id , payload = fdp . distance , fdp . vector , attrs [ 'id' ] . int64 , attrs [ 'payload' ] . string print ( f ' - \" { payload } \" with id = { dp_id } , vector = { vector . coordinates } , distance = { distance } ' )","title":"Use Vektonn API with a Python client"},{"location":"quick-start/#whats-next","text":"Take a look at Jupyter notebooks with several examples of solving problems similar to real ones using vector spaces and Vektonn: Hotels . Task: save the user's time while searching for hotels. This example uses vectorized user reviews to find hotels. Price Match Guarantee . Task: help the seller establish a competitive price for their product on the marketplace. Books . Task: find similar books by user reviews. This example demonstrates usage of sparse vectors.","title":"What's next"},{"location":"roadmap/","text":"Roadmap \u00b6 If you wish some feature to be added please contact us on Slack channel . Persistent Data Sources Kafka SQL Connector? ... (If you have your own datastore, please tell us) HTTP API Search & DataUpload API Python SDK Deploy to Kubernetes \"Static\" Helm charts Deployment artifacts publication Docker images Helm charts Dynamic Index Scheduler Desired Index State Storage Index Scheduler Daemon Index Management API Telemetry Logs Metrics Prometheus ... (Tell us what system you use) Integrations with other MLOps products Kubeflow? ... (Tell us what integration you need)","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"If you wish some feature to be added please contact us on Slack channel . Persistent Data Sources Kafka SQL Connector? ... (If you have your own datastore, please tell us) HTTP API Search & DataUpload API Python SDK Deploy to Kubernetes \"Static\" Helm charts Deployment artifacts publication Docker images Helm charts Dynamic Index Scheduler Desired Index State Storage Index Scheduler Daemon Index Management API Telemetry Logs Metrics Prometheus ... (Tell us what system you use) Integrations with other MLOps products Kubeflow? ... (Tell us what integration you need)","title":"Roadmap"}]}